#pragma once
#include "stdafx.h"
#include "Sort.h"
#include "MaxMin.h"
#include <iostream>
using namespace std;
/*
Поиск элемента в массиве. На выходе номер элемента.
Входные даннные: Указатель на массив, длинна массива, искомый символ.
Выходные даннные: если символ найден выходит его номер в массиве, если нет, то число на единицу больше чем длинна массива.
Данный алгоритм посимвольно проверяет на соответствие искомому значению
*/
int GetSearchSymbolNumber(char *str,int lenght,char symbol) {
	for (int i = 0; i < lenght; i++) {
		if (str[i] == symbol) return i;
	}
	return lenght+1;
}
/*
Поиск элемента в массиве. На выходе bool
Входные даннные: Указатель на массив, длинна массива, искомый символ.
Выходные даннные: если символ найден выходит true, если нет, то false.
Данный алгоритм посимвольно проверяет на соответствие искомому значению
*/
bool SearchSymbolNumber(char *str, int lenght, char symbol) {
	for (int i = 0; i < lenght; i++) {
		if (str[i] == symbol) return true;
	}
	return false;
}
/*
Данная функция предназначена для сортированного массива.
Входные даннные: Указатель на массив, длинна массива, искомый символ.
Выходные даннные: если символ найден выходит его номер в массиве, если нет, то число на единицу больше чем длинна массива.
Функция Sort сортирует масссив, далее выбираем средний элемент стравнивает его с искомым, если он равен искомому значению, то на выход идет 
номер этого символа в массиве, если больше то выбираем половину отрезка от этого элемента и до конца массива, если меньше то берем середину от 
начала и до этого элемента.
И так повторяется до тех пор, пока не найдется искомый элемент в массиве.
*/
int GetSearchBin(char *str, int lenght, char symbol) {
	//Sort(str, lenght);
	int number= lenght / 2;
	for (int i = 0; i < lenght / 2;i++) {
		if (str[number] == symbol) return number;
		if (symbol > str[number]) number += number / 2;
		if (symbol < str[number]) number -= number / 2;
	}
	return lenght + 1;
}
